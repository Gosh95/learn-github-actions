name: Upload Artifacts
on:
  push:
    branches:
      - 'main'
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies # 작업마다 똑같은 npm 종속성 설치가 이루어진다. 이를 캐싱하여 워크플로우 속도를 높일 수 있다. 캐싱 스텝은 모든 작업에 작성해줘야 한다.
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # 유니크한 키 값
      - name: Install dependencies
        run: npm ci
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }} # steps.{id}.outputs.{outputs 이름}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # 유니크한 키 값
      - name: Install dependencies
        run: npm ci
      - name: Build code
        run: npm run build
      - name: Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';' # 키-밸류 형태로 쓰인다.
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
          path: dist
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # 유니크한 키 값
      - name: Output contents
        run: ls
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo Deploying...
